#include <iostream>
#include <string>

using namespace std;

// Define a class to represent medicine information
class Medicine {
public:
    string medicine_type;
    string medicine_name;
    double price;

    Medicine() {}
    Medicine(string type, string name, double price) : medicine_type(type), medicine_name(name), price(price) {}
};

class User {
protected:
    string username;
    string password;

public:
    void login() {
        cout << "===== Pharmacy Management System =====" << endl;
        cout << "Please enter your username: ";
        cin >> username;
        cout << "Please enter your password: ";
        cin >> password;
        cout << "Welcome, " << username << "!" << endl;
    }
};

class Pharmacy : public User {
private:
    Medicine medicines[37];  // Array to hold medicine data
    Medicine cart[37];       // Array to hold medicines added to cart
    int cart_size;           // Size of the cart array

public:
    Pharmacy() : cart_size(0) {
        // Initialize medicines array
        medicines[0] = Medicine("Drops", "Tobramycin eye drops", 130.0);
        medicines[1] = Medicine("Drops", "Milfox eye drops", 164.0);
        medicines[2] = Medicine("Drops", "Milfodex eye drops", 162.0);
        medicines[3] = Medicine("Tablet", "Montelukast tablet", 107.0);
        medicines[4] = Medicine("Tablet", "Palip XR", 132.0);
        medicines[5] = Medicine("Tablet", "Thyronorm", 157.0);
        medicines[6] = Medicine("Suppositories", "FENSUPP suppositories", 116.0);
        medicines[7] = Medicine("Suppositories", "NEOMOL anal suppositories", 40.0);
        medicines[8] = Medicine("Suppositories", "Zyrotram suppository", 36.0);
        medicines[9] = Medicine("Capsules", "Vitamin E capsule", 33.0);
        medicines[10] = Medicine("Capsules", "Becosules capsule", 51.0);
        medicines[11] = Medicine("Capsules", "Gemcal capsule", 339.0);
        medicines[12] = Medicine("Syrups", "Asthalin", 152.0);
        medicines[13] = Medicine("Syrups", "Salbutamol sulphate syrup", 83.0);
        medicines[14] = Medicine("Syrups", "Protussa cough syrup", 85.0);
        medicines[15] = Medicine("Injections", "Mervup injection", 108.0);
        medicines[16] = Medicine("Injections", "Rejunex injection", 47.0);
        medicines[17] = Medicine("Injections", "Deriphilin injection", 87.0);
        medicines[18] = Medicine("Inhalers", "asthalin inhalers", 147.0);
        medicines[19] = Medicine("Inhalers", "aerocart inhalers", 249.0);
        medicines[20] = Medicine("Inhalers", "Levolin inhalers", 214.0);
        medicines[21] = Medicine("Patches", "Mupatch", 141.0);
        medicines[22] = Medicine("Patches", "Dicloplast", 182.0);
        medicines[23] = Medicine("Patches", "2 baconil TTS20", 737.0);
        medicines[24] = Medicine("Buccal tablets", "Corlan", 272.0);
        medicines[25] = Medicine("Buccal tablets", "Fentosa", 138.0);
        medicines[26] = Medicine("Buccal tablets", "Buccastem", 400.0);
        medicines[27] = Medicine("Miscellaneous", "Medicated gloves", 55.0);
        medicines[28] = Medicine("Miscellaneous", "Sanitizers", 15.0);
        medicines[29] = Medicine("Miscellaneous", "Sanitary pads", 40.0);
        medicines[30] = Medicine("Miscellaneous", "Face Masks", 5.0);
        medicines[31] = Medicine("Miscellaneous", "Ankle brace", 2000.0);
        medicines[32] = Medicine("Miscellaneous", "Pulse oximeters", 400.0);
        medicines[33] = Medicine("Miscellaneous", "Digital Thermometer", 300.0);
        medicines[34] = Medicine("Miscellaneous", "Blood pressure monitor", 800.0);
        medicines[35] = Medicine("Miscellaneous", "Glucometer", 800.0);
        medicines[36] = Medicine("Miscellaneous", "Armsling", 250.0);
    }

    void displayMedicines() {
        cout << "\nAvailable Medicines:" << endl;
        cout << "======================" << endl;
        for (int i = 0; i < 37; i++) {
            cout << medicines[i].medicine_type << ", Name: " << medicines[i].medicine_name << ", Price: Rs" << medicines[i].price << endl;
        }
        cout << "======================" << endl;
    }

    void addToCart(const string& med_name) {
        bool found = false;
        for (int i = 0; i < 37; i++) {
            if (caseInsensitiveCompare(medicines[i].medicine_name, med_name)) {
                cart[cart_size++] = medicines[i];
                cout << "Added " << medicines[i].medicine_name << " to cart." << endl;
                found = true;
                break;
            }
        }
        if (!found) {
            cout << "Medicine not found. Please enter a valid medicine name." << endl;
        }
    }

    void displayCart() {
        if (cart_size == 0) {
            cout << "Your cart is empty." << endl;
        } else {
            cout << "\nYour Cart:" << endl;
            cout << "======================" << endl;
            double total = 0.0;
            for (int i = 0; i < cart_size; i++) {
                cout << cart[i].medicine_type << ", Name: " << cart[i].medicine_name << ", Price: Rs" << cart[i].price << endl;
                total += cart[i].price;
            }
            cout << "======================" << endl;
            cout << "Total: Rs" << total << endl;
        }
    }

    void clearCart() {
        cart_size = 0;
        cout << "Cart cleared." << endl;
    }

    // Declare friend function to access private members of Pharmacy
    friend void displayTotalPrice(Pharmacy& pharmacy);

    // Utility function for case-insensitive string comparison
    bool caseInsensitiveCompare(const string& str1, const string& str2) {
        if (str1.size() != str2.size()) {
            return false;
        }
        for (size_t i = 0; i < str1.size(); ++i) {
            if (tolower(str1[i]) != tolower(str2[i])) {
                return false;
            }
        }
        return true;
    }
};

// Friend function to access private members of Pharmacy
void displayTotalPrice(Pharmacy& pharmacy) {
    double total = 0.0;
    for (int i = 0; i < pharmacy.cart_size; i++) {
        total += pharmacy.cart[i].price;
    }
    cout << "Total price of items in the cart: Rs" << total << endl;
}

int main() {
    Pharmacy pharmacy;

    pharmacy.login();

    int choice;
    string med_name;

    do {
        // Menu
        cout << "\n===== Pharmacy Management Menu =====" << endl;
        cout << "1. Display Available Medicines" << endl;
        cout << "2. Search and Add Medicine to Cart" << endl;
        cout << "3. View Cart" << endl;
        cout << "4. Clear Cart" << endl;
        cout << "5. Checkout and Exit" << endl;
        cout << "Enter your choice (1-5): ";
        cin >> choice;

        switch (choice) {
            case 1:
                pharmacy.displayMedicines();
                break;
            case 2:
                cout << "Enter the name of the medicine to add to cart: ";
                cin.ignore(); // ignore newline character from previous input
                getline(cin, med_name);
                pharmacy.addToCart(med_name);
                break;
            case 3:
                pharmacy.displayCart();
                break;
            case 4:
                pharmacy.clearCart();
                break;
            case 5:
                displayTotalPrice(pharmacy);
                pharmacy.displayCart();
                cout << "\nThank you for using Pharmacy Management System. Have a nice day!" << endl;
                break;
            default:
                cout << "Invalid choice. Please enter a number between 1 and 5." << endl;
        }
    } while (choice != 5);

    return 0;
}
